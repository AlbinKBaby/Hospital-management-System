// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" 
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  RECEPTIONIST
  DOCTOR
  LAB_STAFF
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  IN_PROGRESS
}

enum LabReportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BillingStatus {
  PENDING
  PAID
  CANCELLED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      Role
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations based on role
  doctor       Doctor?
  receptionist Receptionist?
  labStaff     LabStaff?

  @@map("users")
}

model Doctor {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @unique @db.ObjectId
  specialization String
  qualification  String
  experience     Int // years of experience
  consultationFee Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  prescriptions Prescription[]
  assignedPatients Patient[] @relation("AssignedPatients")
  treatments   Treatment[]

  @@map("doctors")
}

model Receptionist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  shift     String? // e.g., "Morning", "Evening", "Night"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  patients     Patient[]

  @@map("receptionists")
}

model LabStaff {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  department String? // e.g., "Pathology", "Radiology"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  labReports LabReport[]

  @@map("lab_staff")
}

model Patient {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String?  @unique
  phone         String
  dateOfBirth   DateTime
  gender        Gender
  address       String?
  bloodGroup    String?
  emergencyContact String?
  registeredBy  String   @db.ObjectId // Receptionist who registered the patient
  assignedDoctorId String? @db.ObjectId // Assigned doctor for the patient
  isDeleted     Boolean  @default(false) // Soft delete flag
  deletedAt     DateTime? // Soft delete timestamp
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  receptionist  Receptionist  @relation(fields: [registeredBy], references: [id])
  assignedDoctor Doctor?      @relation("AssignedPatients", fields: [assignedDoctorId], references: [id])
  appointments  Appointment[]
  prescriptions Prescription[]
  labReports    LabReport[]
  medicalRecords MedicalRecord[]
  billings      Billing[]
  treatments    Treatment[]

  @@map("patients")
}

model Appointment {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  patientId     String            @db.ObjectId
  doctorId      String            @db.ObjectId
  receptionistId String           @db.ObjectId
  appointmentDate DateTime
  appointmentTime String
  status        AppointmentStatus @default(SCHEDULED)
  reason        String?
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  patient      Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  receptionist Receptionist  @relation(fields: [receptionistId], references: [id])
  prescription Prescription?

  @@map("appointments")
}

model Prescription {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId String   @unique @db.ObjectId
  patientId     String   @db.ObjectId
  doctorId      String   @db.ObjectId
  diagnosis     String
  medicines     String // JSON string of medicines array
  instructions  String?
  followUpDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@map("prescriptions")
}

model LabReport {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String          @db.ObjectId
  testName    String
  testType    String
  status      LabReportStatus @default(PENDING)
  results     String? // JSON string or text results
  fileUrl     String? // AWS S3 file URL
  fileName    String? // Original file name
  remarks     String?
  conductedBy String?         @db.ObjectId
  reportDate  DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  patient Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labStaff LabStaff? @relation(fields: [conductedBy], references: [id])

  @@map("lab_reports")
}

model MedicalRecord {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String   @db.ObjectId
  recordType  String // e.g., "Allergy", "Surgery", "Chronic Condition"
  description String
  recordDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

model Billing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  patientId     String        @db.ObjectId
  invoiceNumber String        @unique
  services      String // JSON string of services/tests
  totalAmount   Float
  paidAmount    Float         @default(0)
  status        BillingStatus @default(PENDING)
  paymentMethod String?
  notes         String?
  billingDate   DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("billings")
}

model Treatment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String   @db.ObjectId
  doctorId    String   @db.ObjectId
  diagnosis   String
  treatment   String
  medications String? // JSON string of medications
  notes       String?
  followUpDate DateTime?
  treatmentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id])

  @@map("treatments")
}
